#!/usr/bin/env python
"""drone-whois

Usage:
    drone-whois [options] <id> <file>
    drone-whois --version

Options:
    -h --help       Show usage.
    --version       Show version.
    -k              Allow insecure SSL connections.

"""
import os
from sys import exit
from urlparse import urlparse
from netaddr import IPAddress, AddrFormatError, IPNetwork
from ipwhois import IPWhois, ASNRegistryError
from docopt import docopt
from pylair import models
from pylair import client

def main():
    arguments = docopt(__doc__, version='drone-whois 1.0.4')
    lair_url = ''
    try:
        lair_url = os.environ['LAIR_API_SERVER']
    except KeyError:
        print "Fatal: Missing LAIR_API_SERVER environment variable"
        exit(1)

    u = urlparse(lair_url)
    if u.username is None or u.password is None:
        print "Fatal: Missing username and/or password"
        exit(1)

    project_id = arguments['<id>']
    project = dict(models.project)
    project['id'] = project_id
    project['commands'] = [{'command': 'ipwhois', 'tool': 'ipwhois'}]
    project['tool'] = 'drone-whois'

    opts = client.Options(u.username, u.password, u.hostname + ":" + str(u.port), project_id, scheme=u.scheme,
                          insecure_skip_verify=arguments['-k'])

    lines = []
    cidrs = set()
    try:
        lines = [line.rstrip('\n') for line in open(arguments['<file>'])]
    except IOError as e:
        print "Fatal: Could not open file. Error: {0}".format(e)
        exit(1)
    for line in lines:
        try:
             IPs = list(IPNetwork(line))
        except AddrFormatError:
            print "Info: Skipping {0}. Not an IP Address".format(line)
            continue
        for ip in IPs:
            o = IPWhois(ip)
            try:
                results = o.lookup_rws()
            except ASNRegistryError:
                print 'Error: There was an exception thrown when looking up whois information for {}'.format(ip)
                continue
            for net in results['nets']:
                if net['cidr'] in cidrs:
                    continue
                cidrs.add(net['cidr'])
                netblock = dict(models.netblock)
                netblock['projectId'] = project_id
                netblock['asn'] = results['asn']
                netblock['asnCountryCode'] = results['asn_country_code']
                netblock['asnCidr'] = results['asn_cidr']
                netblock['asnDate'] = results['asn_date']
                netblock['asnRegistry'] = results['asn_registry']
                if net['abuse_emails'] is not None:
                    netblock['abuseEmails'] = ','.join(net['abuse_emails'].split('\n'))
                if net['misc_emails'] is not None:
                    netblock['miscEmails'] = ','.join(net['misc_emails'].split('\n'))
                if net['tech_emails'] is not None:
                    netblock['techEmails'] = ','.join(net['tech_emails'].split('\n'))
                netblock['cidr'] = net['cidr']
                netblock['name'] = net['name']
                netblock['address'] = net['address']
                netblock['city'] = net['city']
                netblock['state'] = net['state']
                netblock['country'] = net['country']
                netblock['postalCode'] = net['postal_code']
                netblock['created'] = net['created']
                netblock['updated'] = net['updated']
                netblock['description'] = net['description']
                netblock['handle'] = net['handle']
                project['netblocks'].append(netblock)
    
    res = client.import_project(project, opts)
    if res['status'] == 'Error':
        print "Fatal: " + res['message']
        exit(1)
    print "Success: Operation completed successfully"


if __name__ == '__main__':
    main()

